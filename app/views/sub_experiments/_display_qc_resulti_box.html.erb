<style>
  .axis path,
  .axis line {
    fill: none;
    stroke: #000;
    shape-rendering: crispEdges;
  }

  .line {
    fill: none;
    stroke: steelblue;
    stroke-width: 1.5px;
  }
</style>


<h4> <%= @title %>  </h4>
*** <%= @status %>***

<% if @fig_flag %>
<div id="fig_qc"> </div>
<% end %>

<br>
<br>
<br>

<h4> Data details  </h4>
<table class="table table-striped">
  <thead>
    <tr>
      <% @data_head.split("\t").each do |s| %>
        <th> <%= s %></th>
      <% end %>
    </tr>
  </thead>
  <tbody>
    <% @data_body.each do |dd| %>
    <tr>
      <% dd.split("\t").each do |d| %>
        <td> <%= d %> </td>
      <% end %>
    </tr>
  <% end %>
 </tbody>
</table>


<% if @fig_flag %>
<script>
  var margin = {top: 50, right: 150, bottom: 50, left: 80},
  width = 800 - margin.left - margin.right,
  height = 500 - margin.top - margin.bottom;


  var x = d3.scale.ordinal().rangePoints([0, width]);

  var y = d3.scale.linear().range([height, 0]);

  var color = d3.scale.ordinal().range(["#1f77b4","#ff7f0e","#2ca02c","#9467bd","#8c564b","#e377c2","#7f7f7f","#bcbd22"," #17becf"]);
  var color_c = "#d62728";

  var xAxis = d3.svg.axis()
  .scale(x)
  .orient("bottom");

  var yAxis = d3.svg.axis()
  .scale(y)
  .orient("left");

  var line = d3.svg.line()
  .interpolate("linear")
  .x(function(d) { return x(d.name); })
  .y(function(d) { return y(d.value); });

  var svg = d3.select("#fig_qc").append("svg")
  .attr("width", width + margin.left + margin.right)
  .attr("height", height + margin.top + margin.bottom)
  .append("g")
  .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  d3.json("<%= raw  @data_url %>", function(dataall) {
    data = dataall.data;
    color.domain(data.map(function(d) {return d.name}));

    x.domain(data[0].value.map(function(d) {return d.name}));
      if(dataall.yscale.length <2){
      y.domain([
          d3.min(data, function(c) { return d3.min(c.value, function(v) { return v.value; }) *0.9; }),
          d3.max(data, function(c) { return d3.max(c.value, function(v) { return v.value; }) *1.1; })
         ]);
    }else{
        y.domain(dataall.yscale);
    }

    svg.append("g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + height + ")")
    .call(xAxis);

    svg.append("g")
    .attr("class", "y axis")
    .call(yAxis);

    // title and labels
    // xlable
    svg.append("text")
    .attr("x", width/2)
    .attr("y", height + 30)
    .attr("dy", ".71em")
    .style("text-anchor", "middle")
    .text(dataall.xlabel);
    //ylable
    svg.append("text")
    .attr("transform", "rotate(-90)")
    .attr("x", -height/2)
    .attr("y", -50)
    .attr("dy", ".71em")
    .style("text-anchor", "middle")
    .text(dataall.ylabel);
    // title
    svg.append("text")
    .attr("x", width/2)
    .attr("y", -20)
    .style("text-anchor", "middle")
    .text(dataall.title);

    var linechart = svg.selectAll(".linechart")
    .data(data)
    .enter().append("g")
    .attr("class", "linechart");

    linechart.append("path")
    .attr("class", "line")
    .attr("d", function(d) { return line(d.value); })
    .style("stroke", function(d) { return color(d.name); })

    linechart.each(drawpoint);

    linechart.append("text")
    .datum(function(d) { return {name: d.name, value: d.value[d.value.length - 1]}; })
    .attr("transform", function(d) { return "translate(" + (x(d.value.name)+5) + "," + y(d.value.value) + ")"; })
    .attr("x", 3)
    .attr("dy", ".35em")
    .text(function(d) { return d.name; });


    function drawpoint(data_s){
      var cell = d3.select(this).selectAll(".cell")
      .data(data_s.value)
      .enter().append("circle")
      .attr("class", "cell")
      .attr("cx", function(d) { return x(d.name); })
      .attr("cy", function(d) { return y(d.value); } )
      .attr("r", 3 )
      .style("fill", function(d) { return "rgb(255,255,255)"; } )
      .style("stroke-width",2)
      .style("stroke", function(d) { return color(data_s.name); });

    }


  });

</script>
<% end %>
