<button id="savePng" class="btn pull-right">SavePng</button>
<div id="chart1" class="fig-margin-top">
  <svg style="height:500px">
  </svg>
</div>
<script type="text/javascript" language="javascript" charset="utf-8">
//<![CDATA[
$('#savePng').unbind('click').click(function() {
    var canvas = $('#chart1 svg')[0];
    saveSvgAsPng(canvas, 'TCR.png');
    });  
</script>

<script type="text/javascript">
   
d3.json("<%= raw @url_fig_data %>", function (data) {

   nv.addGraph(function() {
     var chart = nv.models.scatterChart()
     .margin({left: 100,right:150,bottom:100}) //Adjust chart margins to give the x-axis some breathing room.
     .showDistX(true) //showDist, when true, will display those little distribution lines on the axis.
     .showDistY(true)
     .transitionDuration(350)
     .color(d3.scale.category10().range());
    
      //Configure how the tooltip looks.
     chart.tooltipContent(function(key,x,y) {
       return 'ID: ' + Math.round(Math.pow(10,x)) + '<p>Frequency: ' + Math.pow(10,y) + '</p>' ;
       })
   
    
     //Axis settings
     chart.xAxis
        .tickFormat(d3.format('.02f'));
     chart.yAxis.tickFormat(d3.format('.02f'));
    
     //We want to show shapes other than circles.
     chart.scatter.onlyCircles(false);
    
   
     d3.select('#chart1 svg')
     .datum(data)
     .call(chart);
    
     nv.utils.windowResize(chart.update);
    
     return chart;
   });
 });

function numeric_format_e(d,n){
  if(d==null){ return "NULL"}
  t = Math.abs(d);
  if(t>10 | t<0.01){
    return d.toExponential(n);
  }else{
    return d.toPrecision(n+1);
 }
}


  </script>
